study_flow
# guide: https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/
# guide, complete: https://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
# data <- readRDS("study_flow.Rds")
study_flow <- grViz("digraph flowchart {
graph [layout = dot]
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle]
one [label = '@@1']
three [label = '@@3']
six [label = '@@6']
seven [label = '@@7']
eight [label = '@@8']
nine [label = '@@9']
ten [label = '@@10']
# sp1 [shape = point, width = 0]
# sp2 [shape = point, width = 0]
# edge definitions with the node IDs
edge [fontname = Helvetica]
one -> three # [label = '@@2']
three -> six [label = '@@4']
one -> seven [label = '@@4']
six -> eight
six -> nine
six -> ten
# tab1 -> sp1 [dir = none]
# sp1 -> tab2
# tab2 -> sp2 [dir = none]
# sp2 -> tab3
}
[1]: paste0('Available cohort [2015 - 2016] \\ (N = ', data.fmt[1], ')')
[2]: paste0('Death event within study period \\ (N = ', data.fmt[2], ')')
[3]: paste0('No. subjects with ADE within baseline and study period \\ (N = ', data.fmt[3], ')')
[4]: paste0('Exclude subjects with invalid ADE code (N = ', data.fmt[4], '), valid ADE within baseline and 1st Q (N = ', data.fmt[5], '), or with > 1 ADE (N = ', data.fmt[8], ')')
[5]: paste0('Subjects free from ADE within baseline and 1st Q (N = ', data.fmt[6], ')')
[6]: paste0('Subjects with one ADE (N = ', data.fmt[7], ')')
[7]: paste0('Eligible controls (N = ', data.fmt[9], ')')
[8]: paste0('Gastrointestinal bleeding (N = ', data.fmt[10], ')')
[9]: paste0('Intracranial bleeding (N = ', data.fmt[11], ')')
[10]: paste0('Acute liver injury (N = ', data.fmt[12], ')')
")
study_flow
# render and save figure
study_flow %>%
export_svg %>%
charToRaw %>%
rsvg %>%
png::writePNG(
file.path("~/bips_devel", "task13_realdata/graphs", "study_flow.png"))
# guide: https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/
# guide, complete: https://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html
# data <- readRDS("study_flow.Rds")
study_flow <- grViz("digraph flowchart {
graph [layout = dot]
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle]
one [label = '@@1']
three [label = '@@3']
six [label = '@@6']
seven [label = '@@7']
eight [label = '@@8']
nine [label = '@@9']
ten [label = '@@10']
# sp1 [shape = point, width = 0]
# sp2 [shape = point, width = 0]
# edge definitions with the node IDs
edge [fontname = Helvetica]
one -> three # [label = '@@2']
three -> six [label = '@@4']
one -> seven [label = '@@4']
six -> eight
six -> nine
six -> ten
# tab1 -> sp1 [dir = none]
# sp1 -> tab2
# tab2 -> sp2 [dir = none]
# sp2 -> tab3
}
[1]: paste0('Available cohort [2015 - 2016] \\ (N = ', data.fmt[1], ')')
[2]: paste0('Death event within study period \\ (N = ', data.fmt[2], ')')
[3]: paste0('Subjects with ADE within baseline and study period \\ (N = ', data.fmt[3], ')')
[4]: paste0('Exclude subjects with invalid ADE code (N = ', data.fmt[4], '), valid ADE within baseline and 1st Q (N = ', data.fmt[5], '), or with > 1 ADE (N = ', data.fmt[8], ')')
[5]: paste0('Subjects free from ADE within baseline and 1st Q (N = ', data.fmt[6], ')')
[6]: paste0('Subjects with one ADE (N = ', data.fmt[7], ')')
[7]: paste0('Eligible controls (N = ', data.fmt[9], ')')
[8]: paste0('Gastrointestinal bleeding (N = ', data.fmt[10], ')')
[9]: paste0('Intracranial bleeding (N = ', data.fmt[11], ')')
[10]: paste0('Acute liver injury (N = ', data.fmt[12], ')')
")
study_flow
# render and save figure
study_flow %>%
export_svg %>%
charToRaw %>%
rsvg %>%
png::writePNG(
file.path("~/bips_devel", "task13_realdata/graphs", "study_flowchart.png"))
q()
library(DiagrammeR)
inclusion_flowchart <- grViz(
sprintf("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle]
base [label = '@@1']
exc1 [label = '@@2']
rem1 [label = '@@3']
exc2 [label = '@@4']
rem2 [label = '@@5']
exc3 [label = '@@6']
rem3 [label = '@@7']
exc4 [label = '@@8']
rem4 [label = '@@9']
# downward arrows FROM dummy nodes where a side arrow starts
node [shape=none, width=0, height=0, label = '']
side1 -> rem1;
side2 -> rem2;
side3 -> rem3;
side4 -> rem4;
# side arrows from dummy nodes
{rank = same; side1 -> exc1}
{rank = same; side2 -> exc2}
{rank = same; side3 -> exc3}
{rank = same; side4 -> exc4}
# downword LINES TO dummy sites where a side arrow starts
edge [dir = none]
base -> side1;
rem1 -> side2;
rem2 -> side3;
rem3 -> side4;
}
[1]: 'Included patients with baseline data: n=%s participants'
[2]: 'Excluded for reason 1: n=%s'
[3]: 'Remain after exclusion 1: n=%s'
[4]: 'Excluded for reason 2: n=%s'
[5]: 'Remain after exclusion 2: n=%s'
[6]: 'Excluded for reason 3: n=%s'
[7]: 'Remain after reason 3: n=%s'
[8]: 'Excluded for reason 4: n=%s'
[9]: 'Remain after reason 4: n=%s'
",
100, #1, could be extracted from a table
10, #2, could be extracted from a table
90, #3, could be extracted from a table
25, #4, could be extracted from a table
65, #5, could be extracted from a table
4, #6, could be extracted from a table
61, #7, could be extracted from a table
17, #8, could be extracted from a table
44 #9, could be extracted from a table
) # closes sprintf
inclusion_flowchart
inclusion_flowchart_naked <- grViz("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle]
base [label = 'base']
exc1 [label = 'exc1']
rem1 [label = 'rem1']
exc2 [label = 'exc2']
rem2 [label = 'rem2']
exc3 [label = 'exc3']
rem3 [label = 'rem3']
exc4 [label = 'exc4']
rem4 [label = 'rem4']
# downward arrows FROM dummy nodes where a side arrow starts
node [shape=none, width=0, height=0, label = '']
side1 -> rem1;
side2 -> rem2;
side3 -> rem3;
side4 -> rem4;
# side arrows from dummy nodes
{rank = same; side1 -> exc1}
{rank = same; side2 -> exc2}
{rank = same; side3 -> exc3}
{rank = same; side4 -> exc4}
# downword LINES TO dummy sites where a side arrow starts
edge [dir = none]
base -> side1;
rem1 -> side2;
rem2 -> side3;
rem3 -> side4;
}
") # closes grViz call
inclusion_flowchart_naked
inclusion_flowchart
inclusion_flowchart <- grViz(
sprintf("digraph flowchart {
# node definitions with substituted label text
node [fontname = Helvetica, shape = rectangle]
base [label = '@@1']
exc1 [label = '@@2']
rem1 [label = '@@3']
exc2 [label = '@@4']
rem2 [label = '@@5']
exc3 [label = '@@6']
rem3 [label = '@@7']
exc4 [label = '@@8']
rem4 [label = '@@9']
# downward arrows FROM dummy nodes where a side arrow starts
node [shape=none, width=0, height=0, label = '']
side1 -> rem1;
side2 -> rem2;
side3 -> rem3;
side4 -> rem4;
# side arrows from dummy nodes
{rank = same; side1 -> exc1}
{rank = same; side2 -> exc2}
{rank = same; side3 -> exc3}
{rank = same; side4 -> exc4}
# downword LINES TO dummy sites where a side arrow starts
edge [dir = none]
base -> side1;
rem1 -> side2;
rem2 -> side3;
rem3 -> side4;
}
[1]: 'Included patients with baseline data: n=%s participants'
[2]: 'Excluded for reason 1: n=%s'
[3]: 'Remain after exclusion 1: n=%s'
[4]: 'Excluded for reason 2: n=%s'
[5]: 'Remain after exclusion 2: n=%s'
[6]: 'Excluded for reason 3: n=%s'
[7]: 'Remain after reason 3: n=%s'
[8]: 'Excluded for reason 4: n=%s'
[9]: 'Remain after reason 4: n=%s'
",
100, #1, could be extracted from a table
10, #2, could be extracted from a table
90, #3, could be extracted from a table
25, #4, could be extracted from a table
65, #5, could be extracted from a table
4, #6, could be extracted from a table
61, #7, could be extracted from a table
17, #8, could be extracted from a table
44 #9, could be extracted from a table
) # closes sprintf
inclusion_flowchart
q()
q()
library(swirl)
swirl()
install.packages("learnr")
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!)
'My first function!
boring_function('My first function!')
boring_function
sub()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args()
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram('I hate swirl')
submit()
submit()
mad_libs(place = 'UA', adjective = 'pretty', noun = 'noun')
submit()
'I' %p% 'love' %p% 'R!'
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!)
LDtH5UccfJ31KxkQa9Sz
_
''
'''
boring_function('My first function!')
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args()
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram('I hate swirl')
submit()
mad_libs(place = 'UA', adjective = 'pretty', noun = 'noun')
submit()
'I' %p% 'love' %p% 'R!'
q()
q()
PRJ_DIR <- ifelse(Sys.info()[["nodename"]] == "bipscluster.bips-institut.de" | grepl(Sys.info()[["nodename"]], pattern = 'node'),
"/home/Gepard/pv_monitor/task1_3",
"/home/mariam/bips_devel")
library(data.table)
PKG_DIR <- "task13_realdata"
DATA_DIR <- "data"
source(file.path(PRJ_DIR, PKG_DIR, "lib", "cohort_helpers.R"))
# TODO: call ftsim loaddb and the etl
# read ttd data
load(file.path(PRJ_DIR, PKG_DIR, DATA_DIR, "ttd_clean_data", "ttd_drug_target_m.rda"))
load(file.path(PRJ_DIR, PKG_DIR, DATA_DIR, "ttd_clean_data", "ttd_disease_target_m.rda"))
anticoag <- c("B01AF01", "B01AF02", "B01AF03", "B01AE07", "B01AA03", "B01AA04")
names(anticoag) <- c("Riva", "Api", "Edox", "Dabi", "Warf", "Phenpro")
anticoag %in% colnames(ttd_drug_target_m)
anticoagpath <- c("hsa04610", "hsa04080")
anticoagpath %in% rowames(ttd_drug_target_m)
anticoagpath <- c("hsa04610", "hsa04080")
anticoagpath %in% rownames(ttd_drug_target_m)
colnames(ttd_drug_target_m)
str(ttd_drug_target_m)
ttd_drug_target_m <- cbind(ttd_drug_target_m, c("B01AF03", "B01AE07"))
n <- data.frame(row.names = rownames(ttd_drug_target_m), colnames = c("B01AF03", "B01AE07"))
ttd_drug_target_m[, c('B01AF01', 'B01AF04')]
ttd_drug_target_m[c(ttd_drug_target_m$B01AF01, ttd_drug_target_m$B01AF04), ]
ttd_drug_target_m[c(ttd_drug_target_m$B01AF01, ttd_drug_target_m$B01AF04), , drop = TRUE]
ttd_drug_target_m[, c(ttd_drug_target_m$B01AF01, ttd_drug_target_m$B01AF04) , drop = TRUE]
ttd_drug_target_m[, c(ttd_drug_target_m$B01AF01, ttd_drug_target_m$B01AF04)]
ttd_drug_target_m[c(ttd_drug_target_m$B01AF01, ttd_drug_target_m$B01AF04), ]
subset(ttd_drug_target_m, select = c("B01AF03", "B01AE07"))
n <- subset(ttd_drug_target_m, select = c("B01AF01", "B01AF02"))
n
colSums(n)
names(n) <- c("B01AF03", "B01AE07")
n["B01AE07", "hsa04080"]
n[n$B01AE07, "hsa04080"]
n[n$B01AE07,]
n["hsa04080", "B01AE07"]
n["hsa04080", "B01AE07"] <- 1
n
ttd_drug_target_m <- cbind(ttd_drug_target_m, n)
ttd_drug_target_m[, order(colnames(ttd_drug_target_m))]
ttd_drug_target_m <- ttd_drug_target_m[, order(colnames(ttd_drug_target_m))]
dim(ttd_drug_target_m)
# remove . from icds (clean like gepard)
names(ttd_disease_target_m) <- gsub(names(ttd_disease_target_m), pattern = '.', fixed = T, replacement = '')
ttd_drug_target_m <- data.table(ttd_drug_target_m, keep.rownames = TRUE)
ttd_disease_target_m <- data.table(ttd_disease_target_m, keep.rownames = TRUE)
setkey(ttd_disease_target_m, rn)
setkey(ttd_drug_target_m, rn)
all_targets <- merge(ttd_disease_target_m, ttd_drug_target_m, all = TRUE)
all_targets[is.na(all_targets)] <- 0
dim(all_targets)
colnames(all_targets)
all_targets[1:20, 1:20]
all_targets_m <- data.matrix(all_targets[, -1]) # remove the rn column
rownames(all_targets_m) <- all_targets$rn
all_targets_l <- matrix_to_list(all_targets_m)
all_targets_l
all_targets_l[['hsa04610']]
unlist9all_targets_l[['hsa04610']])
unlist(all_targets_l[['hsa04610']])
unique(substr(all_targets_l[['hsa04610']], 1, 3))
unique(substr(all_targets_l[['hsa04080']], 1, 3))
unlist(all_targets_l[['hsa04080']])
unlist(all_targets_l[['hsa04080']])[1:1000]
unlist(all_targets_l[['hsa04080']])[1000:2000]
unlist(all_targets_l[['hsa04080']])[2000:3000]
lapply(all_targets_l, length)
unlist(all_targets_l[['hsa04080']])[3000:4000]
unlist(all_targets_l[['hsa04080']])[4000:5000]
unlist(all_targets_l[['hsa04080']])[5000:7000]
unlist(all_targets_l[['hsa04080']])[5000:6000]
unlist(all_targets_l[['hsa04080']])[6000:8000]
unlist(all_targets_l[['hsa04080']])[6000:7000]
unlist(all_targets_l[['hsa04080']])[8000:9000]
unlist(all_targets_l[['hsa04080']])[9000:10000]
all_targets_l
unique(unlist(all_targets_l))
length(unique(unlist(all_targets_l)))
order(length(unique(unlist(all_targets_l))))
order(unique(unlist(all_targets_l)))
NA %in% unique(unlist(all_targets_l))
"I48" %in% unlist(all_targets_l[['hsa04080']])
"I4" %in% unlist(all_targets_l[['hsa04080']])
all_targets_l[['hsa04080']]
"I48' %in% all_targets_l[['hsa04080']]
''
""
"
"I48" %in% all_targets_l[['hsa04080']]
ttd_disease_target_m[1:10, 1:10]
ttd_disease_target_m[rn == 'hsa04610']
ttd_disease_target_m[rn == 'hsa04610' & .SD == 1]
ttd_disease_target_m[rn == 'hsa04610' & .SD == 1, ]
ttd_disease_target_m[rn == 'hsa04610', 1:10]
ttd_disease_target_m[rn == 'hsa04610', 1:1000]
ttd_disease_target_m[rn == 'hsa04610', c(:I48)]
ttd_disease_target_m[rn == 'hsa04610', c(:I48"")]
ttd_disease_target_m[rn == 'hsa04610', c(:I48")]
ttd_disease_target_m[rn == 'hsa04610', c("I48")]
ttd_disease_target_m[rn == 'hsa04610', c("I480")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "D696")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "D69")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "D6")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "D60")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "I481")]
ttd_disease_target_m[rn == 'hsa04610', c("I480", "I621")]
ttd_disease_target_m[rn == 'hsa04610', .SD == 1, SDcol = colnames(ttd_disease_target_m)[-1]]
ttd_disease_target_m[rn == 'hsa04610', .SD == 1, .SDcol = colnames(ttd_disease_target_m)[-1]]
ttd_disease_target_m[rn == 'hsa04610', .SD == 1, .SDcol = colnames(ttd_disease_target_m)[-1]][1:10]
ttd_disease_target_m[rn == 'hsa04610', .SD == 1, .SDcol = colnames(ttd_disease_target_m)[-1]][, 1:10]
unique(unlist(all_targets_l))
x = unique(unlist(all_targets_l))
x[order(x)]
has.na(x[order(x)])
is.na(x)
x[is.na(x)]
all_targets_m
colnames(x)
rownames(all_targets_m)
colnames(all_targets_m)
all_targets[, "NA"]
source('~/bips_devel/task13_realdata/src/transform_ttd_pathways_to_groups.R')
all_targets
dim(all_targets)
dim(all_targets_m)
dim(all_targets_l)
all_targets_l[1:20]
lapply(all_targets_l)
lapply(all_targets_l, length)
unlist(lapply(all_targets_l, length))
all_targets_l[["hsa04610"]]
all_targets_l[["hsa04610"]][1000:2000]
all_targets_l[["hsa04610"]][2000:3500]
all_targets_l[["hsa04610"]][2000:3000]
all_targets_l[["hsa04610"]][3000:4000]
all_targets_l[["hsa04610"]][3000:length(all_targets_l[["hsa04610"]])]
saveRDS(all_targets_l, file.path(PRJ_DIR, PKG_DIR, DATA_DIR, "ttd_pathways_doac.Rds"))
length(all_targets_l)
q()
length(unique(unlist(all_targets_l)))
x = readRDS(all_targets_l, file.path(PRJ_DIR, PKG_DIR, DATA_DIR, "ttd_pathways.Rds"))
x = readRDS( file.path(PRJ_DIR, PKG_DIR, DATA_DIR, "ttd_pathways.Rds"))
length(unique(unlist(x)))
q()
source('~/bips_devel/task13_realdata/src/transform_ttd_pathways_to_groups.R')
length(unique(unlist(all_targets_l)))
q()
setwd("~/bips_devel/ARTPredict")
library(devtools)
load_all()
set.seed(NULL)
set.seed(235478965)
m = 100
n = 2000
X <- matrix(rbinom(m * n, 1, .05), ncol = m)
X_train <- X[1:1000,]
X_test <- X[1001:2000,]
groups = list(1:10, 30:40, 80:100, c(3,5,30,33,39))
y <- sapply(1:n, function(i) {
x <- X[i, ]
lg <- -4 + 4 * sum(x[c(3, 5)]) + 4 * sum(x[c(30, 33, 39)])
py <- 1 / (1 + exp(-lg))
rbinom(1,1,py)
})
y_train <- y[1:1000]
y_test  <- y[1001:2000]
res <- artp.fit(X_train, y_train, groups = groups, verbose = T, trunc.point = 3)
pred <- artp.predict(res, X_test, alpha = .2)
table(pred$y.hat, y_test)
glm.out <- glm(y_train ~ X_train, family = binomial(link = "logit"))
probabilities <- predict(glm.out, as.data.frame(X_test), type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
table(predicted.classes, y_test)
setwd("~/bips_devel/ARTPredict")
devtools::load_all()
set.seed(NULL)
set.seed(235478965)
m = 100
n = 2000
X <- matrix(rbinom(m * n, 1, .05), ncol = m)
X_train <- X[1:1000,]
X_test <- X[1001:2000,]
groups = list(1:10, 30:40, 80:100, c(3,5,30,33,39))
y <- sapply(1:n, function(i) {
x <- X[i, ]
lg <- -4 + 4 * sum(x[c(3, 5)]) + 4 * sum(x[c(30, 33, 39)])
py <- 1 / (1 + exp(-lg))
rbinom(1,1,py)
})
y_train <- y[1:1000]
y_test  <- y[1001:2000]
fit <- artp.fit(X_train, y_train, groups = groups, verbose = T, trunc.point = 3)
pred <- artp.predict(res, X_test, alpha = .2)
table(pred$y.hat, y_test)
glm.out <- glm(y_train ~ X_train, family = binomial(link = "logit"))
probabilities <- predict(glm.out, as.data.frame(X_test), type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
table(predicted.classes, y_test)
res <- artp.fit(X_train, y_train, groups = groups, verbose = T, trunc.point = 3)
pred <- artp.predict(res, X_test, alpha = .2)
table(pred$y.hat, y_test)
q()
